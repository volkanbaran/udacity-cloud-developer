service:
  name: serverless-recipe-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    RECIPES_TABLE: Recipes-${self:provider.stage}
    RECIPES_ID_TABLE: RecipeIdIndex-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    IMAGES_S3_BUCKET: serverless-recipe-images-vb-${self:provider.stage}
    

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Recipe API
        description: Serverless application for recipes
    models:
      - name: CreateRecipeRequest
        contentType: application/json
        schema: ${file(models/create-recipe-request.json)}
      - name: UpdateRecipeRequest
        contentType: application/json
        schema: ${file(models/update-recipe-request.json)}    

functions:

  Auth:
    handler: src/lambda/auth/rs256Auth0Authorizer.handler
    
    


  GetRecipes:
    handler: src/lambda/http/getRecipes.handler
    events:
      - http:
          method: get
          path: recipes
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  CreateRecipe:
    handler: src/lambda/http/createRecipe.handler
    events:
      - http:
          method: post
          path: recipes
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Recipe
            description: Create a new Recipe
            requestModels:
              'application/json': CreateRecipeRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  
  UpdateRecipe:
    handler: src/lambda/http/updateRecipe.handler
    events:
      - http:
          method: patch
          path: recipes/{recipeId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Recipe
            description: Create a new Recipe
            requestModels:
              'application/json': UpdateRecipeRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  
  DeleteRecipe:
    handler: src/lambda/http/deleteRecipe.handler
    events:
      - http:
          method: delete
          path: recipes/{recipeId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: recipes/{recipeId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*  

resources:
  Resources:
    ReciperecipesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: recipeId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: recipeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.RECIPES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.RECIPES_ID_TABLE}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    
    # S3 Bucket
    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # S3 Bucket Policy
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Policy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*' # Anyone
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Bucket: !Ref AttachmentBucket

    #Request Validator    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false